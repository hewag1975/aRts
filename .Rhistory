plot.sf_paint(mountains_paint)
devtools::load_all(".")
data(mountains)
plot(mountains, rgb = 1:3)
mountains_paint = painting(mountains)
?person
library(aRts)
data(mountains)
mountains_paint = painting(mountains)
library(aRts)
data(mountains)
mountains_paint = painting(mountains)
plot(mountains_paint)
devtools::load_all(".")
plot(mountains_paint)
mountains_paint = painting(mountains)
plot(mountains_paint)
class(mountains_paint)
data(mountains)
plot(mountains, rgb = 1:3)
mountains_paint = painting(mountains)
devtools::load_all(".")
mountains_paint = painting(mountains)
plot(mountains_paint)
mar(mfrow = c(1, 2))
data(mountains)
mountains_paint = painting(mountains)
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
data(mountains)
mountains_paint = painting(mountains)
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
par(mfrow = c(2, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
par(mfrow = c(2, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint, add = TRUE)
devtools::load_all(".")
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
devtools::load_all(".")
data(autumn)
plot(autumn, rgb = 1:3)
autumn_paint = painting(autumn)
autumn_paint
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
devtools::load_all(".")
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
dev.off()
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
devtools::load_all(".")
data(autumn)
class(autumn)
plot(autumn, rgb = 1:3)
autumn_paint = painting(autumn)
library(aRts)
# remotes::install_github("hewag1975/aRts")
library(aRts)
data(autumn)
autumn_paint = painting(autumn)
x =autumn
sc_args = c(list(x = x), list(...))
devtools::load_all(".")
autumn_paint = painting(autumn)
plot(autumn_paint)
devtools::load_all(".")
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot.sf(
sf::st_geometry(x)
, border = NA
, col = col
, reset = FALSE
, ...
)
}
plot(autumn_paint)
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
, reset = FALSE
, ...
)
}
plot(autumn_paint)
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
, reset = TRUE
, ...
)
}
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3)
sf::st_bbox(autumn_paint)
sf::st_bbox(autumn)
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3, downsample = FALSE)
devtools::load_all(".")
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
, ...
)
}
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3)
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3, main = "")
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
)
plot(autumn, rgb = 1:3, main = "")
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
)
plot(autumn, rgb = 1:3, main = "")
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(autumn, rgb = 1:3, main = "")
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
sf::plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
sf:::plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
devtools::load_all(".")
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(autumn, rgb = 1:3, main = "")
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
autumn_paint = painting(autumn)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
plot(autumn, rgb = 1:3, main = "")
library(supercells)
ortho = rast(system.file("raster/ortho.tif", package = "supercells"))
library(supercells)
library(terra)
library(sf)
ortho = rast(system.file("raster/ortho.tif", package = "supercells"))
plot(ortho)
plot(ortho)
ortho_slic1 = supercells(
ortho
, k = 2000
, compactness = 10,
transform = "to_LAB"
)
ortho_slic1
par(mfrow = c(1, 2))
plot(ortho)
plot(st_geometry(ortho_slic1))
class(ortho)
library(stars)
st_as_stars(ortho)
par(mfrow = c(1, 2))
plot(st_as_stars(ortho))
plot(st_as_stars(ortho), rgb = 1:3)
plot(st_geometry(ortho_slic1))
par(mfrow = c(1, 2))
plot(st_as_stars(ortho), rgb = 1:3)
plot(st_geometry(ortho_slic1))
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3, main = "", reset = FALSE)
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3, main = "", reset = FALSE)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
# , key.pos = NULL
# , reset = FALSE
)
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3, main = "", reset = FALSE)
plot(autumn_paint)
## 2021-12-22 ====
## configure package to use pkgdown
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
autumn
library(aRts)
autumn
pkgdown::build_site()
pkgdown::build_site()
plot(autumn, rgb = 1:3, main = "", reset = FALSE, useRaster = TRUE)
pkgdown::build_site()
pkgdown::build_site()
install.packages("deepdep")
pkg = "dplyr"
dependency_type = c("Depends", "Imports", "Suggests", "LinkingTo")
depths = 1:3
lapply(
depths
, \(d) {
deepdep::plot_dependencies(
pkg, local = TRUE, , depth = d, dependency_type = dependency_type
)
}
)
library(tinytest)
devtools::load_all(".")
matrix(c(0, 0, 0), nrow = 1)
rgb2hex(matrix(c(0, 0, 0), nrow = 1))
## rgb2hex
expect_equal(
rgb2hex(matrix(c(0, 0, 0), nrow = 1))
, "#000000"
)
library(aRts)
## tinytest
tinytest::setup_tinytest(pkgdir = ".")
library(aRts)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
sf::st_crs(mountains) = 3035
usethis::use_data(mountains, overwrite = TRUE)
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
autumn
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
mountains
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
usethis::use_data(autumn, overwrite = TRUE, compress = "gz")
usethis::use_data(autumn, overwrite = TRUE, compress = "gzip")
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
usethis::use_data(autumn, overwrite = TRUE)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
sf::st_crs(mountains) = 3035
usethis::use_data(mountains, overwrite = TRUE)
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
autumn
usethis::use_data(autumn, overwrite = TRUE)
plot(autumn)
plot(autumn, rgb = 1:3)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
jpeg::readJPEG(ifl)
img = jpeg::readJPEG(ifl)
class(img)
dim(img)
stars::st_as_stars(img)
plot(img)
img = jpeg::readJPEG(ifl, native = TRUE)
class(img)
dim(img)
plot(img)
usethis::use_data(img, overwrite = TRUE)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
as.data.table(mountains)
data.table::as.data.table(mountains)
mountains = data.table::as.data.table(mountains)
usethis::use_data(mountains, overwrite = TRUE)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
stars:::split.stars(mountains, f = 3)
mountains = stars:::split.stars(mountains, f = 3)
mountains = data.table::as.data.table(mountains)
mountains
usethis::use_data(mountains, overwrite = TRUE)
usethis::use_data(mountains, overwrite = TRUE, compress = "gzip")
usethis::use_data(mountains, overwrite = TRUE, compress = "xz")
data("autumn")
data(autumn)
plot(autumn, rgb = 1:3)
stars::write_stars(autumn, dsn = "~/Downloads/autumn.jpg")
library(aRts)
library(aRts)
library(aRts)
stars::read_stars("/img/autumn.jpg")
stars::read_stars("img/autumn.jpg")
stars::read_stars("autumn.jpg")
stars::read_stars(system.file("img/autumn.jpg", "aRts"))
system.file("img/autumn.jpg", "aRts")
system.file("img/autumn.jpg", package = "aRts")
system.file("img/lake.jpg", package = "aRts")
ifl = system.file("img/lake.jpg", package = "aRts")
stars::read_stars(ifl)
lake = system.file("img/lake", package = "aRts")
lake
lake = system.file("img/lake.jpg", package = "aRts")
lake
list.files("img")
c("img/lake.jpg", "img/mountain.jpg")
lake = system.file(ifl, package = "aRts")
system.file(ifl, package = "aRts")
ifl = c("img/lake.jpg", "img/mountain.jpg")
system.file(ifl, package = "aRts")
ifl = c("img/lake.jpg", "img/mountains.jpg")
system.file(ifl, package = "aRts")
library(stars)
library(sf)
library(aRts)
ifl = system.file(
c("img/lake.jpg", "img/mountains.jpg")
, package = "aRts"
)
read_stars(ifl)
lapply(ifl
read_stars
)
lapply(
ifl
, FUN = read_stars
)
img = lapply(
ifl
, FUN = read_stars
)
ptg = lapply(
img
, FUN = painting
)
ptg[[1]]
class(ptg[[1]])
dim(img[[1]])
asp_ratio_1 = dim(img[[1]])[1] / dim(img[[1]])[2]
asp_ratio_1
asp_ratio_1 = dim(img[[1]])[2] / dim(img[[1]])[1]
asp_ratio_1
dim(img[[1]])[2]
asp_ratio_1 = dim(img[[1]])[2] / (dim(img[[1]])[1] * 2)
asp_ratio_1
lapply(img, FUN = \(i) dim(i)[2] / (2 * dim(i)[1]))
plot(ptg[[1]])
jpeg(
, width = dim(img[[1]])[1]
, units = "px"
plot(ptg[[1]])
jpeg(
"~/lake_painting.jpg"
, width = dim(img[[1]])[1]
, height = dim(img[[1])[2]
, units = "px"
)
ptg[[1]]
jpeg(
"~/lake_painting.jpg"
, width = dim(img[[1]])[1]
, height = dim(img[[1]])[2]
, units = "px"
)
plot(ptg[[1]])
dev.off()
dev.off()

<<<<<<< HEAD
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
sf::plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
sf:::plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
devtools::load_all(".")
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(autumn, rgb = 1:3, main = "")
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
autumn_paint = painting(autumn)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
plot(autumn, rgb = 1:3, main = "")
library(supercells)
ortho = rast(system.file("raster/ortho.tif", package = "supercells"))
library(supercells)
library(terra)
library(sf)
ortho = rast(system.file("raster/ortho.tif", package = "supercells"))
plot(ortho)
plot(ortho)
ortho_slic1 = supercells(
ortho
, k = 2000
, compactness = 10,
transform = "to_LAB"
)
ortho_slic1
par(mfrow = c(1, 2))
plot(ortho)
plot(st_geometry(ortho_slic1))
class(ortho)
library(stars)
st_as_stars(ortho)
par(mfrow = c(1, 2))
plot(st_as_stars(ortho))
plot(st_as_stars(ortho), rgb = 1:3)
plot(st_geometry(ortho_slic1))
par(mfrow = c(1, 2))
plot(st_as_stars(ortho), rgb = 1:3)
plot(st_geometry(ortho_slic1))
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3, main = "", reset = FALSE)
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
, reset = FALSE
)
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3, main = "", reset = FALSE)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
# , key.pos = NULL
# , reset = FALSE
)
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3, main = "", reset = FALSE)
plot(autumn_paint)
## 2021-12-22 ====
## configure package to use pkgdown
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
autumn
library(aRts)
autumn
pkgdown::build_site()
pkgdown::build_site()
plot(autumn, rgb = 1:3, main = "", reset = FALSE, useRaster = TRUE)
pkgdown::build_site()
pkgdown::build_site()
install.packages("deepdep")
pkg = "dplyr"
dependency_type = c("Depends", "Imports", "Suggests", "LinkingTo")
depths = 1:3
lapply(
depths
, \(d) {
deepdep::plot_dependencies(
pkg, local = TRUE, , depth = d, dependency_type = dependency_type
)
}
)
library(tinytest)
devtools::load_all(".")
matrix(c(0, 0, 0), nrow = 1)
rgb2hex(matrix(c(0, 0, 0), nrow = 1))
## rgb2hex
expect_equal(
rgb2hex(matrix(c(0, 0, 0), nrow = 1))
, "#000000"
)
library(aRts)
## tinytest
tinytest::setup_tinytest(pkgdir = ".")
library(aRts)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
sf::st_crs(mountains) = 3035
usethis::use_data(mountains, overwrite = TRUE)
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
autumn
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
mountains
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
usethis::use_data(autumn, overwrite = TRUE, compress = "gz")
usethis::use_data(autumn, overwrite = TRUE, compress = "gzip")
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
usethis::use_data(autumn, overwrite = TRUE)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
sf::st_crs(mountains) = 3035
usethis::use_data(mountains, overwrite = TRUE)
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
autumn
usethis::use_data(autumn, overwrite = TRUE)
plot(autumn)
plot(autumn, rgb = 1:3)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
jpeg::readJPEG(ifl)
img = jpeg::readJPEG(ifl)
class(img)
dim(img)
stars::st_as_stars(img)
plot(img)
img = jpeg::readJPEG(ifl, native = TRUE)
class(img)
dim(img)
plot(img)
usethis::use_data(img, overwrite = TRUE)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
as.data.table(mountains)
data.table::as.data.table(mountains)
mountains = data.table::as.data.table(mountains)
usethis::use_data(mountains, overwrite = TRUE)
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
stars:::split.stars(mountains, f = 3)
mountains = stars:::split.stars(mountains, f = 3)
mountains = data.table::as.data.table(mountains)
mountains
usethis::use_data(mountains, overwrite = TRUE)
usethis::use_data(mountains, overwrite = TRUE, compress = "gzip")
usethis::use_data(mountains, overwrite = TRUE, compress = "xz")
data("autumn")
data(autumn)
plot(autumn, rgb = 1:3)
stars::write_stars(autumn, dsn = "~/Downloads/autumn.jpg")
library(aRts)
library(aRts)
library(aRts)
stars::read_stars("/img/autumn.jpg")
stars::read_stars("img/autumn.jpg")
stars::read_stars("autumn.jpg")
stars::read_stars(system.file("img/autumn.jpg", "aRts"))
system.file("img/autumn.jpg", "aRts")
system.file("img/autumn.jpg", package = "aRts")
system.file("img/lake.jpg", package = "aRts")
ifl = system.file("img/lake.jpg", package = "aRts")
stars::read_stars(ifl)
lake = system.file("img/lake", package = "aRts")
lake
lake = system.file("img/lake.jpg", package = "aRts")
lake
list.files("img")
c("img/lake.jpg", "img/mountain.jpg")
lake = system.file(ifl, package = "aRts")
system.file(ifl, package = "aRts")
ifl = c("img/lake.jpg", "img/mountain.jpg")
system.file(ifl, package = "aRts")
ifl = c("img/lake.jpg", "img/mountains.jpg")
system.file(ifl, package = "aRts")
library(stars)
library(sf)
library(aRts)
ifl = system.file(
c("img/lake.jpg", "img/mountains.jpg")
, package = "aRts"
)
read_stars(ifl)
lapply(ifl
read_stars
)
lapply(
ifl
, FUN = read_stars
)
img = lapply(
ifl
, FUN = read_stars
)
ptg = lapply(
img
, FUN = painting
)
ptg[[1]]
class(ptg[[1]])
dim(img[[1]])
asp_ratio_1 = dim(img[[1]])[1] / dim(img[[1]])[2]
asp_ratio_1
=======
>>>>>>> osmmaps
asp_ratio_1 = dim(img[[1]])[2] / dim(img[[1]])[1]
asp_ratio_1
dim(img[[1]])[2]
asp_ratio_1 = dim(img[[1]])[2] / (dim(img[[1]])[1] * 2)
asp_ratio_1
lapply(img, FUN = \(i) dim(i)[2] / (2 * dim(i)[1]))
plot(ptg[[1]])
jpeg(
, width = dim(img[[1]])[1]
, units = "px"
plot(ptg[[1]])
jpeg(
"~/lake_painting.jpg"
, width = dim(img[[1]])[1]
, height = dim(img[[1])[2]
, units = "px"
)
ptg[[1]]
jpeg(
"~/lake_painting.jpg"
, width = dim(img[[1]])[1]
, height = dim(img[[1]])[2]
, units = "px"
)
plot(ptg[[1]])
dev.off()
dev.off()
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(aRts)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(magick)
aut = image_read(ifl[1])
print(aut)
plot(aut)
install.packages("OpenImageR")
library(OpenImageR)
aut = readImage(ifl[1])
plot(aut)
class(aut)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(OpenImageR)
aut = readImage(ifl[1])
class(aut)
library(OpenImageR)
aut = readImage(ifl[1])
aut_slic = superpixels(
input_image = aut,
method = "slic",
superpixel = 200,
compactness = 20,
return_slic_data = TRUE,
return_labels = TRUE,
write_slic = "",
verbose = TRUE
)
par(mfrow=c(1,2), mar = c(0.2, 0.2, 0.2, 0.2))
plot_slic = OpenImageR::NormalizeObject(aut_slic$slic_data)
plot_slic = grDevices::as.raster(plot_slic)
graphics::plot(plot_slic)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(stars)
library(sf)
library(aRts)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
img = read_stars(ifl[[1]])
img
img = read_stars(ifl[[1]])
img
st_crs(img)
library(stars)
library(sf)
library(aRts)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
img = read_stars(ifl[[1]])
img
st_crs(img)
ptg = painting(img)
plot(ptg)
?supercells
ptg = painting(img, k = 10)
plot(ptg)
ptg = painting(img, k = 100)
plot(ptg)
ptg = painting(img, k = 500)
plot(ptg)
ptg = painting(img, k = 100)
plot(ptg)
ptg = painting(img, k = 1000)
plot(ptg)
ptg = lapply(
c(500, 1000, 2000, 5000)
, FUN = \(i) painting(img, k = i)
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
ptg = lapply(
c(1, 10, 50, 100)
, FUN = \(i) painting(img, k = 2500, compactness = i)
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) painting(img, k = 2500, compactness = 50)
)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
<<<<<<< HEAD
img
, k = 2500
, compactness = 50
, avg_fun = str2expression(i)
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
rm(ptg)
ptg = lapply(
c("mean", "median", "max", "var")
=======
img
, k = 2500
, compactness = 50
, avg_fun = str2expression(i)
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
rm(ptg)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = str2expression(i)
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
}
)
ptg = lapply(
c("mean", "median", "max", "sd")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
painting(
img
, k = 2500
, compactness = 10
, avg_fun = eval(str2expression(i))
)
ptg = lapply(
c("mean", "median", "max", "sd")
>>>>>>> osmmaps
, FUN = \(i) {
painting(
img
, k = 2500
<<<<<<< HEAD
, compactness = 50
, avg_fun = str2expression(i)
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
}
)
ptg = lapply(
c("mean", "median", "max", "sd")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
painting(
img
, k = 2500
, compactness = 10
, avg_fun = eval(str2expression(i))
)
ptg = lapply(
c("mean", "median", "max", "sd")
, FUN = \(i) {
painting(
img
, k = 2500
=======
>>>>>>> osmmaps
, compactness = 10
, avg_fun = eval(str2expression(i))
)
}
)
par(mfrow = c(2, 2))
for (i in 1:4) plot(ptg[[i]])
ifl
img = lapply(ifl, FUN = read_stars)
ptg = lapply(img, FUN = painting, k = 2500, compactness = 50)
ptg
lapply(ptg, FUN = plot)
par(mfrow = c(2, 2))
lapply(ptg, FUN = plot)
fls
ifl
basename(ifl)
paste0("paint_", basename(ifl))
mapply(
\(img, ptg, ofl){
jpeg(
paste0("~/", ofl)
, width = dim(img)[1]
, height = dim(img)[2]
, units = "px"
)
plot(ptg)
dev.off()
}
, img = img
, ptg = ptg
, ofl = paste0("paint_", basename(ifl))
)
<<<<<<< HEAD
=======
layerName = "building"
key = "building"
values = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
list(layername, key, values)
list(layerName, key, values)
layerName = "building"
layerKey = "building"
layerValues = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
list(name = layerName, key = layerKey, values = layerValues)
layers = NULL
key_values = NULL
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
)
as.list(1:2)
layers = 1:3
key_values = as.list(1:2)
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
)
layers = 1:3
key_values = as.list(1:2)
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
, "'key_values' must be of class(list)!" = {
inherits(key_values, what = "list")
}
)
layers = 1:3
key_values = as.list(1:3)
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
, "'key_values' must be of class(list)!" = {
inherits(key_values, what = "list")
}
)
key_values = 1:3
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
, "'key_values' must be of class(list)!" = {
inherits(key_values, what = "list")
}
)
FeatureBuildings = function(){
list(
key = "building"
, values = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
)
}
FeatureBuildings()
maptype = "building"
switch(maptype
, "building" = c(
"building"
, "roadsMajor"
, "roadsMinor"
, "rivers"
, "railways"
)
, "street" = c(
"roadsMajor"
, "roadsMinor"
, "roadsSmall"
, "rivers"
, "railways"
)
)
layers = switch(
maptype
, "building" = c(
"building"
, "roadsMajor"
, "roadsMinor"
, "rivers"
, "railways"
)
, "street" = c(
"roadsMajor"
, "roadsMinor"
, "roadsSmall"
, "rivers"
, "railways"
)
)
layers
layers
switch(
layers
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
## create feature list
lapply(
layers
, FUN = \(i){
switch(
i
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
)
FeatureBuildings = function(){
list(
key = "building"
, values = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
)
}
FeatureRoadsMajor = function(){
list(
key = "highway"
, values = c(
"motorway"
, "motorway_link"
, "motorway_junction"
, "primary"
, "primary_link"
, "trunk"
)
)
}
FeatureRoadsMinor = function(){
list(
key = "highway"
, values = c(
"secondary"
, "tertiary"
, "secondary_link"
, "tertiary_link"
)
)
}
FeatureRoadsSmall = function(){
list(
key = "highway"
, values = c(
"residential"
, "living_street"
, "unclassified"
, "service"
, "footway"
, "corridor"
, "bridleway"
)
)
}
FeatureRivers = function(){
list(
key = "waterway"
, values = c(
"river"
)
)
}
FeatureRailways = function(){
list(
key = "railway"
, values = c(
"rail"
)
)
}
## create feature list
lapply(
layers
, FUN = \(i){
switch(
i
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
)
## create feature list
mapply(
\(l){
switch(
i
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
, l = layers
, SIMPLIFY = FALSE
, USE.NAMES = TRUE
)
## create feature list
mapply(
\(l){
switch(
l
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
, l = layers
, SIMPLIFY = FALSE
, USE.NAMES = TRUE
)
>>>>>>> osmmaps

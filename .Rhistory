ptg = painting(pic)
sc_args = c(list(x = x), list(...))
sc_args
!"k" %in% names(sc_args)
if (!"k" %in% names(sc_args)) c(list(k = 2000), sc_args)
sc_args
list(k = 2000)
if (!"k" %in% names(sc_args)) c(list(k = 2000), sc_args)
c(list(k = 2000), sc_args)
devtools::load_all(".")
ptg = painting(pic)
devtools::load_all(".")
ptg = painting(pic)
devtools::load_all(".")
ptg = painting(pic)
ptg
subset(sc, select = c("col", "geometry"))
subset(prg, select = c("col", "geometry"))
subset(ptg, select = c("col", "geometry"))
devtools::load_all(".")
data(pic)
ptg = painting(pic)
x = pic
stopifnot(
"'x' needs to be of class 'stars'!" = {
inherits(x, "stars")
}
)
sc_args = c(list(x = x), list(...))
if (!"k" %in% names(sc_args)) {
sc_args = c(list(k = 2000), sc_args)
}
sc = do.call("supercells", args = sc_args)
devtools::load_all(".")
ptg = painting(pic)
ptg = painting(pic)
devtools::load_all(".")
ptg = painting(pic)
devtools::load_all(".")
ptg = painting(pic)
sc = do.call("supercells", args = sc_args)
class(sc)
class(sf::st_drop_geometry(sc[4:6]))
rgb2hex(sf::st_drop_geometry(sc[4:6]))
class(rgb2hex(sf::st_drop_geometry(sc[4:6])))
class(sc)
sc = ptg
sc
c("sf_paint", class(sc))
structure(sc, class = c("sf_paint", class(sc)))
sc = structure(sc, class = c("sf_paint", class(sc)))
sc
class(sc)
devtools::load_all(".")
ptg = painting(pic)
class(ptg)
plot.sf_paint = function(x){
plot(
st_geometry(x)
, border = NA
, col = x$col
)
}
devtools::load_all(".")
rm(plot.sf_paint())
rm(plot.sf_paint)
devtools::load_all(".")
plot(ptg)
plot(pic, rgb = 1:3)
plot(ptg)
ptg = painting(pic)
par(mfrow = c(1, 2))
plot(pic, rgb = 1:3)
plot(ptg)
ptg
devtools::load_all(".")
ptg = painting(pic)
ptg
col = rgb2hex(sf::st_drop_geometry(sc[4:6]))
sf::st_drop_geometry(sc[4:6])
sc
sc = ptg
sc
sf::st_drop_geometry(sc[4:6])
class(sf::st_drop_geometry(sc[4:6]))
col = rgb2hex(sf::st_drop_geometry(sc[4:6]))
# jpeg(
#     "img/fichtel_sc.jpg"
#     , width = dim(img)[1]
#     , height = dim(img)[2]
#     , units = "px"
# )
plot(
st_geometry(sc)
, border = NA
, col = col
)
# jpeg(
#     "img/fichtel_sc.jpg"
#     , width = dim(img)[1]
#     , height = dim(img)[2]
#     , units = "px"
# )
plot(
sf::st_geometry(sc)
, border = NA
, col = col
)
sc$col = rgb2hex(sf::st_drop_geometry(sc[4:6]))
# jpeg(
#     "img/fichtel_sc.jpg"
#     , width = dim(img)[1]
#     , height = dim(img)[2]
#     , units = "px"
# )
plot(
sf::st_geometry(sc)
, border = NA
, col = sc$col
)
plot.sf_paint = function(x, col = x$col){
plot(
st_geometry(x)
, border = NA
, col = col
)
}
plot(sc)
x$col
col = sc$col
plot(
st_geometry(x)
, border = NA
, col = col
)
plot(
sf::st_geometry(x)
, border = NA
, col = col
)
x = sc
plot(
sf::st_geometry(x)
, border = NA
, col = col
)
plot.sf_paint = function(x, col = x$col){
plot(
sf::st_geometry(x)
, border = NA
, col = col
)
}
plot(sc)
class(sc)
devtools::load_all(".")
ptg = painting(pic)
ptg
plot(ptg)
devtools::load_all(".")
devtools::load_all(".")
data(pic)
ptg = painting(pic)
par(mfrow = c(1, 2))
plot(pic, rgb = 1:3)
plot(ptg)
plot(pic, rgb = 1:3)
plot(ptg)
str(ptg)
devtools::load_all(".")
ptg = painting(pic)
sc = ptg
sc
col = sc$col
x = sc
plot(
sf::st_geometry(x)
, border = NA
, col = col
)
?plot.lm
plot.sf_paint = function(
x
, col = x$col
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
)
}
plot.l
devtools::load_all(".")
devtools::load_all(".")
## code to prepare `pic` dataset goes here
ifl = "~/Pictures/images/pic_001.jpg"
## code to prepare `pic` dataset goes here
ifl = "~/Pictures/images/pic_001.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(pic) = 3035
## code to prepare `pic` dataset goes here
ifl = "~/Pictures/images/pic_001.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
sf::st_crs(autumn) = 3035
usethis::use_data(autumn, overwrite = TRUE)
remotes::install_github("hewag1975/aRts")
data(autumn)
plot(pic, rgb = 1:3)
plot(autumn, rgb = 1:3)
class(autumn)
autumn_paint = painting(autumn)
devtools::load_all(".")
autumn_paint = painting(autumn)
plot(autumn_paint)
autumn_paint
class(autumn_paint)
plot.sf_paint = function(
x
, col = x$col
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
)
}
plot(autumn_paint)
devtools::load_all(".")
autumn
sf::st_crs(autumn)
c = sf::st_crs(autumn)
c$input
ifl = "~/Pictures/images/pic_001.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
autumn
ifl = "~/Pictures/images/pic_001.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
painting(autumn)
ifl = "~/Pictures/images/pic_001.jpg"
autumn = stars::read_stars(ifl)
names(autumn) = "Autumn forest"
painting(autumn)
plot(autumn)
plot(autumn, rgb = 1:3)
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl)
autumn
## autumn
ifl = "~/Pictures/images/autumn.jpg"
autumn = stars::read_stars(ifl, driver = "jpg")
## autumn
ifl = "~/Pictures/images/autumn"
autumn = stars::read_stars(ifl, driver = "jpg")
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
sf::st_crs(mountains) = 3035
## mountains
ifl = "~/Pictures/images/mountains_2.jpg"
mountains = stars::read_stars(ifl)
names(mountains) = "Mountains"
sf::st_crs(mountains) = 3035
usethis::use_data(mountains, overwrite = TRUE)
data(mountains)
plot(mountains, rgb = 1:3)
mountains_paint = painting(mountains)
plot(mountains_paint)
devtools::load_all(".")
plot(mountains_paint)
class(mountains_paint)
plot.sf_paint(mountains_paint)
devtools::load_all(".")
data(mountains)
plot(mountains, rgb = 1:3)
mountains_paint = painting(mountains)
?person
library(aRts)
data(mountains)
mountains_paint = painting(mountains)
library(aRts)
data(mountains)
mountains_paint = painting(mountains)
plot(mountains_paint)
devtools::load_all(".")
plot(mountains_paint)
mountains_paint = painting(mountains)
plot(mountains_paint)
class(mountains_paint)
data(mountains)
plot(mountains, rgb = 1:3)
mountains_paint = painting(mountains)
devtools::load_all(".")
mountains_paint = painting(mountains)
plot(mountains_paint)
mar(mfrow = c(1, 2))
data(mountains)
mountains_paint = painting(mountains)
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
data(mountains)
mountains_paint = painting(mountains)
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
par(mfrow = c(2, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
par(mfrow = c(2, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint, add = TRUE)
devtools::load_all(".")
par(mfrow = c(1, 2))
plot(mountains, rgb = 1:3)
plot(mountains_paint)
devtools::load_all(".")
data(autumn)
plot(autumn, rgb = 1:3)
autumn_paint = painting(autumn)
autumn_paint
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
devtools::load_all(".")
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
dev.off()
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
devtools::load_all(".")
data(autumn)
class(autumn)
plot(autumn, rgb = 1:3)
autumn_paint = painting(autumn)
library(aRts)
# remotes::install_github("hewag1975/aRts")
library(aRts)
data(autumn)
autumn_paint = painting(autumn)
x =autumn
sc_args = c(list(x = x), list(...))
devtools::load_all(".")
autumn_paint = painting(autumn)
plot(autumn_paint)
devtools::load_all(".")
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot.sf(
sf::st_geometry(x)
, border = NA
, col = col
, reset = FALSE
, ...
)
}
plot(autumn_paint)
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
, reset = FALSE
, ...
)
}
plot(autumn_paint)
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
, reset = TRUE
, ...
)
}
par(mfrow = c(1, 2))
plot(autumn, rgb = 1:3)
plot(autumn_paint)
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3)
sf::st_bbox(autumn_paint)
sf::st_bbox(autumn)
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3, downsample = FALSE)
devtools::load_all(".")
#' Plot object of class `sf_paint`
#'
#' @param x, object of class `sf_paint`.
#' @param col, vector of color values. Defaults to the hexcolor column
#'   attached when running `painting()`.
#'
#' @importFrom sf st_geometry
#'
#' @export
plot.sf_paint = function(
x
, col = x$col
, ...
){
plot(
sf::st_geometry(x)
, border = NA
, col = col
, ...
)
}
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3)
par(mfrow = c(1, 2))
plot(autumn_paint)
plot(autumn, rgb = 1:3, main = "")
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
)
plot(autumn, rgb = 1:3, main = "")
# plot(autumn_paint)
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, key.pos = NULL
)
plot(autumn, rgb = 1:3, main = "")
par(mfrow = c(1, 2))
# plot(autumn_paint)
plot(autumn, rgb = 1:3, main = "")
plot(
sf::st_geometry(autumn_paint)
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
sf::plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)
sf:::plot.sfc(
# sf::st_geometry(autumn_paint)
autumn_paint
, border = NA
, col = autumn_paint$col
, reset = FALSE
)

asp_ratio_1 = dim(img[[1]])[2] / dim(img[[1]])[1]
asp_ratio_1
dim(img[[1]])[2]
asp_ratio_1 = dim(img[[1]])[2] / (dim(img[[1]])[1] * 2)
asp_ratio_1
lapply(img, FUN = \(i) dim(i)[2] / (2 * dim(i)[1]))
plot(ptg[[1]])
jpeg(
, width = dim(img[[1]])[1]
, units = "px"
plot(ptg[[1]])
jpeg(
"~/lake_painting.jpg"
, width = dim(img[[1]])[1]
, height = dim(img[[1])[2]
, units = "px"
)
ptg[[1]]
jpeg(
"~/lake_painting.jpg"
, width = dim(img[[1]])[1]
, height = dim(img[[1]])[2]
, units = "px"
)
plot(ptg[[1]])
dev.off()
dev.off()
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(aRts)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(magick)
aut = image_read(ifl[1])
print(aut)
plot(aut)
install.packages("OpenImageR")
library(OpenImageR)
aut = readImage(ifl[1])
plot(aut)
class(aut)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(OpenImageR)
aut = readImage(ifl[1])
class(aut)
library(OpenImageR)
aut = readImage(ifl[1])
aut_slic = superpixels(
input_image = aut,
method = "slic",
superpixel = 200,
compactness = 20,
return_slic_data = TRUE,
return_labels = TRUE,
write_slic = "",
verbose = TRUE
)
par(mfrow=c(1,2), mar = c(0.2, 0.2, 0.2, 0.2))
plot_slic = OpenImageR::NormalizeObject(aut_slic$slic_data)
plot_slic = grDevices::as.raster(plot_slic)
graphics::plot(plot_slic)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
library(stars)
library(sf)
library(aRts)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
ifl
img = read_stars(ifl[[1]])
img
img = read_stars(ifl[[1]])
img
st_crs(img)
library(stars)
library(sf)
library(aRts)
ifl = system.file(
paste0("img/", c("autumn", "lake", "mountains_1", "mountains_2"), ".jpg")
, package = "aRts"
)
img = read_stars(ifl[[1]])
img
st_crs(img)
ptg = painting(img)
plot(ptg)
?supercells
ptg = painting(img, k = 10)
plot(ptg)
ptg = painting(img, k = 100)
plot(ptg)
ptg = painting(img, k = 500)
plot(ptg)
ptg = painting(img, k = 100)
plot(ptg)
ptg = painting(img, k = 1000)
plot(ptg)
ptg = lapply(
c(500, 1000, 2000, 5000)
, FUN = \(i) painting(img, k = i)
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
ptg = lapply(
c(1, 10, 50, 100)
, FUN = \(i) painting(img, k = 2500, compactness = i)
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) painting(img, k = 2500, compactness = 50)
)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = str2expression(i)
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
rm(ptg)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = str2expression(i)
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
ptg = lapply(
c("mean", "median", "max", "var")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
}
)
ptg = lapply(
c("mean", "median", "max", "sd")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 50
, avg_fun = eval(str2expression(i))
)
}
)
par(mfrow = c(2, 2))
plot(ptg[[1]])
plot(ptg[[2]])
plot(ptg[[3]])
plot(ptg[[4]])
painting(
img
, k = 2500
, compactness = 10
, avg_fun = eval(str2expression(i))
)
ptg = lapply(
c("mean", "median", "max", "sd")
, FUN = \(i) {
painting(
img
, k = 2500
, compactness = 10
, avg_fun = eval(str2expression(i))
)
}
)
par(mfrow = c(2, 2))
for (i in 1:4) plot(ptg[[i]])
ifl
img = lapply(ifl, FUN = read_stars)
ptg = lapply(img, FUN = painting, k = 2500, compactness = 50)
ptg
lapply(ptg, FUN = plot)
par(mfrow = c(2, 2))
lapply(ptg, FUN = plot)
fls
ifl
basename(ifl)
paste0("paint_", basename(ifl))
mapply(
\(img, ptg, ofl){
jpeg(
paste0("~/", ofl)
, width = dim(img)[1]
, height = dim(img)[2]
, units = "px"
)
plot(ptg)
dev.off()
}
, img = img
, ptg = ptg
, ofl = paste0("paint_", basename(ifl))
)
layerName = "building"
key = "building"
values = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
list(layername, key, values)
list(layerName, key, values)
layerName = "building"
layerKey = "building"
layerValues = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
list(name = layerName, key = layerKey, values = layerValues)
layers = NULL
key_values = NULL
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
)
as.list(1:2)
layers = 1:3
key_values = as.list(1:2)
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
)
layers = 1:3
key_values = as.list(1:2)
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
, "'key_values' must be of class(list)!" = {
inherits(key_values, what = "list")
}
)
layers = 1:3
key_values = as.list(1:3)
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
, "'key_values' must be of class(list)!" = {
inherits(key_values, what = "list")
}
)
key_values = 1:3
stopifnot(
"'layers' & 'key_values' must be of same length!" = {
length(layers) == length(key_values)
}
, "'key_values' must be of class(list)!" = {
inherits(key_values, what = "list")
}
)
FeatureBuildings = function(){
list(
key = "building"
, values = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
)
}
FeatureBuildings()
maptype = "building"
switch(maptype
, "building" = c(
"building"
, "roadsMajor"
, "roadsMinor"
, "rivers"
, "railways"
)
, "street" = c(
"roadsMajor"
, "roadsMinor"
, "roadsSmall"
, "rivers"
, "railways"
)
)
layers = switch(
maptype
, "building" = c(
"building"
, "roadsMajor"
, "roadsMinor"
, "rivers"
, "railways"
)
, "street" = c(
"roadsMajor"
, "roadsMinor"
, "roadsSmall"
, "rivers"
, "railways"
)
)
layers
layers
switch(
layers
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
## create feature list
lapply(
layers
, FUN = \(i){
switch(
i
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
)
FeatureBuildings = function(){
list(
key = "building"
, values = c(
"apartments"
, "commercial"
, "detached"
, "house"
, "residential"
, "retail"
, "semidetached_house"
, "terrace"
, "yes"
)
)
}
FeatureRoadsMajor = function(){
list(
key = "highway"
, values = c(
"motorway"
, "motorway_link"
, "motorway_junction"
, "primary"
, "primary_link"
, "trunk"
)
)
}
FeatureRoadsMinor = function(){
list(
key = "highway"
, values = c(
"secondary"
, "tertiary"
, "secondary_link"
, "tertiary_link"
)
)
}
FeatureRoadsSmall = function(){
list(
key = "highway"
, values = c(
"residential"
, "living_street"
, "unclassified"
, "service"
, "footway"
, "corridor"
, "bridleway"
)
)
}
FeatureRivers = function(){
list(
key = "waterway"
, values = c(
"river"
)
)
}
FeatureRailways = function(){
list(
key = "railway"
, values = c(
"rail"
)
)
}
## create feature list
lapply(
layers
, FUN = \(i){
switch(
i
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
)
## create feature list
mapply(
\(l){
switch(
i
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
, l = layers
, SIMPLIFY = FALSE
, USE.NAMES = TRUE
)
## create feature list
mapply(
\(l){
switch(
l
, "building" = FeatureBuildings()
, "roadsMajor" = FeatureRoadsMajor()
, "roadsMinor" = FeatureRoadsMinor()
, "roadsSmall" = FeatureRoadsSmall()
, "rivers" = FeatureRivers()
, "railways" = FeatureRailways()
)
}
, l = layers
, SIMPLIFY = FALSE
, USE.NAMES = TRUE
)
